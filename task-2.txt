Öğrenci No: 250541019
AD-SOYAD: Beray AKAR

Lütfen seçtiğiniz algoritmaya ait çözümü ve diğer isterleri aşağıya ekleyiniz:
Monopolyde en iyi hamle seçimini hedefleyip rakip hamlelerini öngörmeyi hedefleyen bir bir algoritma yazdırdım ve bunu CHATGPT kullanarak yaptım.
import random
from copy import deepcopy

class Player:
    def __init__(self, name, cash=1500):
        self.name = name
        self.cash = cash
        self.properties = set()

class Property:
    def __init__(self, price, rent):
        self.price = price
        self.rent = rent
        self.owner = None

def random_turn(players, board):
    """Rastgele bir oyuncunun bir turunu oynatır."""
    p = random.choice(players)
    prop = random.choice(board)
    if prop.owner is None and p.cash > prop.price + 100:
        prop.owner = p
        p.properties.add(prop)
        p.cash -= prop.price
    elif prop.owner and prop.owner != p:
        p.cash -= prop.rent
        prop.owner.cash += prop.rent

def simulate(state, steps=10):
    """Belirli sayıda adım simüle eder."""
    players, board = deepcopy(state)
    for _ in range(steps):
        random_turn(players, board)
    return players, board

def expected_value(state, move_func, sims=20):
    """Hamle sonrası ortalama para miktarını döndürür."""
    total = 0
    for _ in range(sims):
        players, board = deepcopy(state)
        move_func(players, board)
        players, board = simulate((players, board))
        me = players[0]  # kendi oyuncumuz
        total += me.cash + sum(p.price for p in me.properties)
    return total / sims

# --- Basit örnek oyun durumu ---
me = Player("Ben")
opponent = Player("Rakip")
board = [Property(200, 20), Property(180, 18), Property(220, 25)]
state = ([me, opponent], board)

# --- 3 olası hamle ---
def move_buy(players, board):
    me = players[0]
    prop = board[0]
    if prop.owner is None and me.cash >= prop.price:
        me.cash -= prop.price
        prop.owner = me
        me.properties.add(prop)

def move_skip(players, board):
    pass

def move_random_buy(players, board):
    me = players[0]
    prop = random.choice(board)
    if prop.owner is None and me.cash >= prop.price:
        me.cash -= prop.price
        prop.owner = me
        me.properties.add(prop)

moves = [("Satın al", move_buy), ("Pas geç", move_skip), ("Rastgele al", move_random_buy)]

# --- En iyi hamleyi bul ---
best_move = max(moves, key=lambda m: expected_value(state, m[1]))
print("En iyi hamle:", best_move[0])
Bunu basit bir pseudocode'a çevirdim.
ALGORİTMA EnIyiHamleSec(state):
    # state = (oyuncular listesi, tahta durumu)

    tanımla moves = [SatınAl, PasGeç, RastgeleAl]
    en_iyi_hamle = None
    en_iyi_değer = -sonsuz

    HER hamle ∈ moves İÇİN:
        değer = BeklenenDeger(state, hamle)
        EĞER değer > en_iyi_değer İSE:
            en_iyi_değer = değer
            en_iyi_hamle = hamle

    DÖNDÜR en_iyi_hamle
FONKSİYON BeklenenDeger(state, hamle):
    toplam = 0

    TEKRARLA sims KERE (örneğin 20 defa):
        # Durumu kopyala (simülasyon için)
        players, board = Kopyala(state)

        # Hamleyi uygula
        hamle(players, board)

        # Oyunu bir süre rastgele oynat
        (players, board) = SimuleEt(players, board, adım_sayısı=10)

        # Kendi oyuncumuzu al
        me = players[0]

        # Toplam servet = nakit + mülklerin değeri
        toplam_servet = me.cash + TOPLAM(p.price HER p ∈ me.properties)
        toplam += toplam_servet

    DÖNDÜR toplam / sims   # ortalama beklenen değer
FONKSİYON SimuleEt(players, board, adım_sayısı):
    HER adım 1’den adım_sayısı’na KADAR:
        rastgele_oyuncu = RastgeleSeç(players)
        rastgele_mülk = RastgeleSeç(board)

        EĞER mülk boş VE oyuncunun nakdi yeterliyse:
            oyuncu mülkü satın al
        DEĞİLSE EĞER mülk başkasına aitse:
            kira öde (nakit transferi yap)
    DÖNDÜR (players, board)

